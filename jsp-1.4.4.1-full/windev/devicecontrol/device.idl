/*
 *  TOPPERS/JSP Kernel
 *      Toyohashi Open Platform for Embedded Real-Time Systems/
 *      Just Standard Profile Kernel
 * 
 *  Copyright (C) 2000-2003 by Embedded and Real-Time Systems Laboratory
 *                              Toyohashi Univ. of Technology, JAPAN
 * 
 *  上記著作権者は，以下の (1)～(4) の条件か，Free Software Foundation 
 *  によって公表されている GNU General Public License の Version 2 に記
 *  述されている条件を満たす場合に限り，本ソフトウェア（本ソフトウェア
 *  を改変したものを含む．以下同じ）を使用・複製・改変・再配布（以下，
 *  利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 * 
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，その適用可能性も
 *  含めて，いかなる保証も行わない．また，本ソフトウェアの利用により直
 *  接的または間接的に生じたいかなる損害に関しても，その責任を負わない．
 * 
 *  @(#) $Id: device.idl,v 1.4 2003/12/20 09:19:59 takayuki Exp $
 */

import "oaidl.idl";
import "ocidl.idl";
#include "olectl.h"
    

    [
        object,
        uuid(6998EBB2-678E-4891-8BD0-C34F165488AC),
        dual,
        helpstring("IDeviceControl Interface"),
        pointer_default(unique)
    ]
    interface IDeviceControl : IDispatch
    {
        [id(1), helpstring("Make a connection with the device manager")] HRESULT Connect();
        [id(2), helpstring("Disconnect a device manager")] HRESULT Close();
        [propget, id(3), helpstring("Turn true if this device is enabled")] HRESULT Valid([out, retval] BOOL *pVal);
        [id(4), helpstring("Make a interrupt request to the kernel")] HRESULT RaiseInterrupt([in]long inhno);
        [id(5), helpstring("Make a address mapping on the manager")] HRESULT Map([in]long address,[in]long size);
        [id(6), helpstring("Release a address mapping on the manager")] HRESULT Unmap([in]long address);
        [propget, id(7), helpstring("Turn true if the kernel is running")] HRESULT IsKernelStarted([out, retval] BOOL *pVal);
        [propget, id(8), helpstring("Internal Buffer offset")] HRESULT Offset([out, retval] long *pVal);
        [propput, id(8), helpstring("Internal Buffer offset")] HRESULT Offset([in] long newVal);
        [propget, id(9), helpstring("Access Width of Internal Buffer")] HRESULT AccessSize([out, retval] short *pVal);
        [propput, id(9), helpstring("Access width of internal buffer")] HRESULT AccessSize([in] short newVal);
        [propget, id(10), helpstring("Value of current scope of internal buffer")] HRESULT Value([out, retval] long *pVal);
        [propput, id(10), helpstring("Value of current scope of internal buffer")] HRESULT Value([in] long newVal);
        [propget, id(11), helpstring("プロパティDeviceName")] HRESULT DeviceName([out, retval] BSTR* pVal);
        [propput, id(11), helpstring("プロパティDeviceName")] HRESULT DeviceName([in] BSTR newVal);
    };

[
    uuid(194B359F-594E-4EE4-A804-84723D1CF1C4),
    version(1.0),
    helpstring("TOPPERS/JSP on Windows Device Component Type Library")
]
library ATLDEVICELib
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    [
        uuid(49253060-4210-43A1-8EA2-3A97587C89B9),
        helpstring("_IDeviceControlEvents Interface")
    ]
    dispinterface _IDeviceControlEvents
    {
        properties:
        methods:
        [id(1), helpstring("Read event notification")] HRESULT OnRead([in] long address, [in] long sz);
        [id(2), helpstring("Write event notification")] HRESULT OnWrite([in] long address, [in] long sz);
        [id(3), helpstring("Kernel start notification")] HRESULT OnKernelStart();
        [id(4), helpstring("Kernel completion notification")] HRESULT OnKernelExit();
    };

    [
        uuid(D6626115-E35B-4B38-BC65-3E59D5535AD4),
        helpstring("DeviceControl Class")
    ]
    coclass DeviceControl
    {
        [default] interface IDeviceControl;
        [default, source] dispinterface _IDeviceControlEvents;
    };
};
